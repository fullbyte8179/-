Куча — древовидная структура данных, где каждый узел соблюдает отношение с потомками: в max-куче родитель больше детей, в min-куче — меньше. Эффективно поддерживает вставку, удаление минимума/максимума и используется для очередей с приоритетом.

Типы и операции:

Бинарная куча — полное двоичное дерево в массивеinsert() O(log n), extract-min/max() O(log n), peek() O(1)

Родитель i → (i-1)/2, дети → 2i+1, 2i+2

Биноминальная куча — набор биномиальных деревьев.

insert(), merge(), decrease-key() O(log n)

Количество деревьев = биты числа элементов: n=13 (1101₂) → B₃+B₂+B₀

Фибоначчиева куча — деревья произвольной формы, ленивый подход.

Амортизированные: insert(), decrease-key(), merge() O(1), extract-min() O(log n)

Использует потенциальную функцию для анализа сложности

Примеры в языках

C++: priority_queue — push(), pop(), top(); хэш — unordered_map (insert(), find(), erase()).

Java: PriorityQueue — offer(), poll(), peek(); хэш — HashMap (put(), get(), remove()).

Python: heapq — heappush(), heappop(), heapify(); хэш — dict ([key]=value, get(), pop(), keys(), values(), update()).

Хэш-таблицы

Структура для быстрого доступа к элементам по ключу через хэш-функцию. Среднее время операций: O(1). Применяются в словарях, кэшах, индексах баз данных.

Основы:

Класс с внутренним списком и хэш-функцией

Методы: set() — добавить, get() — получить, remove() — удалить

Хэш-функция: простая (остаток от деления ASCII) или сложная для уменьшения коллизий

Обеспечивает эффективное хранение и извлечение данных с константным временем доступа.